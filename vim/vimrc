set nocompatible              " be iMproved, required
"filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/mydotfiles/vim/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
Plugin 'tpope/vim-fugitive'
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/syntastic'
Plugin 'tpope/vim-surround'
Plugin 'pangloss/vim-javascript'
Plugin 'ctags.vim'
Plugin 'majutsushi/tagbar'
Plugin 'kien/ctrlp.vim'
Plugin 'valloric/youcompleteme'
Plugin 'honza/vim-snippets'
Plugin 'mattn/emmet-vim'
Plugin 'plasticboy/vim-markdown'
Plugin 'elzr/vim-json'
Plugin 'nono/vim-handlebars'
Plugin 'google/vim-searchindex'
Plugin 'bling/vim-airline'
Plugin 'leafgarland/typescript-vim'
Plugin 'mxw/vim-jsx'
Plugin 'scrooloose/nerdcommenter'
Plugin 'cormacrelf/vim-colors-github'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

" leader key
let mapleader = ","
syntax enable
set t_Co=256
set background=dark
" set background=light
colorscheme lucario "github  " primary
" colorscheme github

" tag bar
nmap <F8> ;TagbarToggle<CR>
"  lazy load tagbar
let g:airline#extensions#tagbar#enabled = 0

map <C-n> ;NERDTreeToggle<CR>
" map <leader>n ;NERDTreeToggle<cr>
map <leader>r ;NERDTreeFind<cr>
" let nerdtree show hidden files
let NERDTreeShowHidden=1

" set search case to a good configuration http://vim.wikia.com/wiki/Searching 
set ignorecase
set smartcase

" search characters as they're entered
set incsearch
" highlight all search matches
set hlsearch

" Display relative line numbers
" set relativenumber
" display the absolute line number at the line you're on
" set number

" Keep the line number gutter narrow so three digits is cozy. 
" set numberwidth=2

" indent smartly using c style
" set cindent

" set tab width
" For tab characters that appear 4-spaces-wide:
set tabstop=2
" If you're using actual tab character in your source code you probably also want these settings 
set softtabstop=0 noexpandtab
" Finally, if you want an indent to correspond to a single tab, you should also use:
set shiftwidth=2
" Conert tab to spaces
set expandtab

" Show special charactors
" set listchars=space:◦
" space:␣eol:¬,tab:>·,trail:~,extends:>,precedes:<,space:◦
" set list

" ctrlp
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 'ra'

set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " MacOSX/Linux
" let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
let g:ctrlp_custom_ignore = {
    \ 'dir':  '\v[\/]\.(git|hg|svn)$',
    \ 'file': '\v\.(exe|so|dll)$',
    \ 'link': 'some_bad_symbolic_links'
    \ }

let g:ctrlp_user_command = 'find %s -type f'        " MacOSX/Linux
" ,e to open recent files
map <leader>e ;CtrlPMRUFiles<cr>

" By default don't wrap lines
set nowrap 

" But do wrap on these types of files...
autocmd FileType markdown setlocal wrap
autocmd FileType html setlocal wrap

" paste content smartly
set paste

" Maintain undo history between sessions
set undofile 
set undodir=~/mydotfiles/vim/.vim/undodir

" after file changed, reload file
set autoread

highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/

"Always show current position
set ruler

" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" Show matching brackets when text indicator is over them
set showmatch 
" How many tenths of a second to blink when matching brackets
set mat=2

" Turn backup off, since most stuff is in SVN, git et.c anyway...
set nobackup
set nowb
set noswapfile

" Linebreak on 500 characters
set lbr
set tw=500

" set relativenumber
set rnu

set ai "Auto indent
set si "Smart indent
set wrap "Wrap lines

" Set 7 lines to the cursor - when moving vertically using j/k
set so=7

" visual mode selection background
hi Visual  guifg=White guibg=LightYellow gui=none
hi Visual  cterm=bold ctermbg=LightGray ctermfg=White

" YouCompleteMe
set runtimepath+=~/mydotfiles/vim/.vim/bundle/youcompleteme
let g:ycm_collect_identifiers_from_tags_files = 1 " 开启 YCM 基于标签引擎
let g:ycm_collect_identifiers_from_comments_and_strings = 1 " 注释与字符串中的内容也用于补全
let g:syntastic_ignore_files=[".*\.py$"]
let g:ycm_seed_identifiers_with_syntax = 1 " 语法关键字补全
let g:ycm_complete_in_comments = 1
let g:ycm_confirm_extra_conf = 0
let g:ycm_key_list_select_completion = ['<c-n>', '<Down>'] " 映射按键, 没有这个会拦截掉tab, 导致其他插件的tab不能用.
let g:ycm_key_list_previous_completion = ['<c-p>', '<Up>']
let g:ycm_complete_in_comments = 1 " 在注释输入中也能补全
let g:ycm_complete_in_strings = 1 " 在字符串输入中也能补全
let g:ycm_collect_identifiers_from_comments_and_strings = 1 " 注释和字符串中的文字也会被收入补全
let g:ycm_global_ycm_extra_conf='~/mydotfiles/vim/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'
let g:ycm_show_diagnostics_ui = 0 " 禁用语法检查
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<CR>" | " 回车即选中当前项
nnoremap <c-j> :YcmCompleter GoToDefinitionElseDeclaration<CR>| " 跳转到定义处
"let g:ycm_min_num_of_chars_for_completion=2 " 从第2个键入字符就开始罗列匹配项

" Easy window navigation
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" fast resizing window
if bufwinnr(1)
  map + <C-W>+
  map - <C-W>
" and the following two lines can cause disfunction of the "q:" command
"	map <c-m> <c-w><
"	map <c-x> <c-w>>
endif

" save a file as if using sudo
cmap w!! w !sudo tee % >/dev/null

" nerd commenter
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1
" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1
" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'
" Set a language to use its alternate delimiters by default
let g:NERDAltDelims_java = 1
" Add your own custom formats or override the defaults
let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }
" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1
" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1
" Enable NERDCommenterToggle to check all selected lines is commented or not
let g:NERDToggleCheckAllLines = 1

" geek configuration
" These two lines will cause nerdtree ctrl + n and ,r not function
nnoremap ; :
nnoremap : ;
nnoremap n nzzzv
nnoremap N Nzzzv
nnoremap <leader>z zMzvzz

"====[ Make the 81st column stand out ]====================

"    " EITHER the entire 81st column, full-screen...
"    highlight ColorColumn ctermbg=magenta
"    set colorcolumn=81

" OR ELSE just the 81st column of wide lines...
highlight ColorColumn ctermbg=magenta
call matchadd('ColorColumn', '\%81v', 100)

function! Incr()
    let a = line('.') - line("'<")
    let c = virtcol("'<")
    if a > 0
        execute 'normal! '.c.'|'.a."\<C-a>"
    endif
    normal `<
endfunction

vnoremap <C-a> :call Incr()<CR>`

set paste

" gui font
set macligatures
set guifont=Operator\ Mono\ Lig:h16

